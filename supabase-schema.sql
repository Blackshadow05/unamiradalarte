-- Tabla de verificación de salud (para comprobar la conexión)
CREATE TABLE health_check (
  id SERIAL PRIMARY KEY,
  status TEXT NOT NULL DEFAULT 'ok',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Insertar un registro en health_check
INSERT INTO health_check (status) VALUES ('ok');

-- Tabla Galeria actualizada con campos adicionales
CREATE TABLE public."Galeria" (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  created_at timestamp without time zone NOT NULL DEFAULT NOW(),
  "Nombre_obra" text NULL,
  "Descripcion" text NULL,
  "Categoria" text NULL,
  image character varying NULL,
  "Año" integer NULL,
  "Dimensiones" text NULL,
  "Tecnica" text NULL,
  "Tiempo_creacion" text NULL,
  "Materiales" text NULL,
  "Inspiracion" text NULL,
  CONSTRAINT Galeria_pkey PRIMARY KEY (id)
) TABLESPACE pg_default;

-- Si la tabla ya existe, agregar las columnas faltantes
-- ALTER TABLE public."Galeria" ADD COLUMN IF NOT EXISTS "Año" integer;
-- ALTER TABLE public."Galeria" ADD COLUMN IF NOT EXISTS "Dimensiones" text;
-- ALTER TABLE public."Galeria" ADD COLUMN IF NOT EXISTS "Tecnica" text;
-- ALTER TABLE public."Galeria" ADD COLUMN IF NOT EXISTS "Tiempo_creacion" text;
-- ALTER TABLE public."Galeria" ADD COLUMN IF NOT EXISTS "Materiales" text;
-- ALTER TABLE public."Galeria" ADD COLUMN IF NOT EXISTS "Inspiracion" text;

-- Tabla de obras de arte
CREATE TABLE artworks (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  title TEXT NOT NULL,
  description TEXT NOT NULL,
  price INTEGER NOT NULL,
  image TEXT NOT NULL,
  category TEXT NOT NULL,
  featured BOOLEAN DEFAULT false,
  dimensions TEXT,
  year INTEGER NOT NULL,
  technique TEXT NOT NULL,
  materials TEXT[] NOT NULL,
  inspiration TEXT NOT NULL,
  creation_time TEXT NOT NULL,
  rating DECIMAL(3,1) DEFAULT 5.0,
  review_count INTEGER DEFAULT 0,
  status TEXT NOT NULL DEFAULT 'disponible',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Tabla de reseñas
CREATE TABLE reviews (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  artwork_id UUID NOT NULL REFERENCES artworks(id) ON DELETE CASCADE,
  user_name TEXT NOT NULL,
  rating INTEGER NOT NULL CHECK (rating >= 1 AND rating <= 5),
  comment TEXT NOT NULL,
  verified BOOLEAN DEFAULT false,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Tabla de mensajes de contacto
CREATE TABLE contact_messages (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name TEXT NOT NULL,
  email TEXT NOT NULL,
  subject TEXT NOT NULL,
  message TEXT NOT NULL,
  read BOOLEAN DEFAULT false,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Función para actualizar el rating y review_count de una obra
CREATE OR REPLACE FUNCTION update_artwork_rating()
RETURNS TRIGGER AS $$
DECLARE
  avg_rating DECIMAL(3,1);
  review_count INTEGER;
BEGIN
  -- Calcular el promedio de calificaciones
  SELECT AVG(rating), COUNT(*)
  INTO avg_rating, review_count
  FROM reviews
  WHERE artwork_id = NEW.artwork_id;
  
  -- Actualizar la obra
  UPDATE artworks
  SET rating = avg_rating, review_count = review_count, updated_at = NOW()
  WHERE id = NEW.artwork_id;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger para actualizar el rating cuando se agrega una reseña
CREATE TRIGGER update_artwork_rating_trigger
AFTER INSERT OR UPDATE OR DELETE ON reviews
FOR EACH ROW
EXECUTE FUNCTION update_artwork_rating();

-- Función para actualizar el timestamp de actualización
CREATE OR REPLACE FUNCTION update_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Triggers para actualizar el timestamp
CREATE TRIGGER update_artworks_timestamp
BEFORE UPDATE ON artworks
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

CREATE TRIGGER update_reviews_timestamp
BEFORE UPDATE ON reviews
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();